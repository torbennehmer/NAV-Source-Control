using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.Serialization;
using System.Xml;
using System.IO;
using log4net;

namespace NavScm.NavInterface
{
    /// <summary>
    /// Encaspulates a complete working copy with all its basic sync operations and its connections both
    /// to the on-disk data structures and to the NAV side of it.
    /// </summary>
    /// <remarks>
    /// So far the class supports only connections with integrated security (NTLM/Kerberos).
    /// </remarks>
    [DataContract (Name = "WorkingCopy", Namespace = "http://terrabit.de/NAVSCM")]
    public class WorkingCopy
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(typeof(WorkingCopy));

        #region ##### CONFIG OPTIONS 

        /// <summary>
        /// Current cache format version number.
        /// </summary>
        private const int CurrentVersion = 1;

        /// <summary>
        /// Version number of the cache, required in case of updates of existing caches to new formats.
        /// </summary>
        [DataMember (IsRequired = true, Name = "Version")]
        private int Version;

        /// <summary>
        /// Identifier for the connection, which is used in all locations to bring things like
        /// the object state cache etc. together.
        /// </summary>
        [DataMember (IsRequired = true, Name = "ID")]
        public Guid Identifier { get; private set; }

        /// <summary>
        /// The name of the connection/Working Copy Pair.
        /// </summary>
        [DataMember (IsRequired = true, Name = "Name")]
        public string Name { get; private set; }

        /// <summary>
        /// EF SQL Data Context DataSource string, f.x. something like, usually autogenerated based on the
        /// SQL connection parameters supplied during construction.
        /// </summary>
        /// <remarks>
        /// Example connection string:
        /// <code>
        /// "Data Source=tbrt-sql-erp-01;Initial Catalog=\"TERRABIT 2015 DEV\";Integrated Security=True"
        /// </code>
        /// </remarks>
        [DataMember (IsRequired = true, Name = "DataSource")]
        public string DataSource { get; private set; }

        /// <summary>
        /// Path to the corresponding finsql.exe
        /// </summary>
        [DataMember (IsRequired = true, Name = "DevEnvPath")]
        public string DevEnvPath { get; private set; }

        /// <summary>
        /// Hostname of the SQL Server to connect to, can include an Instance name (in theory at least).
        /// </summary>
        [DataMember (IsRequired = true, Name = "DatabaseServer")]
        public string DatabaseServer { get; private set; }

        /// <summary>
        /// Name of the Database to connect to.
        /// </summary>
        [DataMember (IsRequired = true, Name = "DatabaseName")]
        public string DatabaseName { get; private set; }

        /// <summary>
        /// Base path of the working copy where we check out to.
        /// </summary>
        [DataMember (IsRequired = true, Name = "WCBasePAth")]
        public string WCBasePath { get; private set; }

        #endregion


        #region ##### GENERAL RUNTIME STATE

        /// <summary>
        /// The default data context connection to the NAV Database.
        /// </summary>
        protected NavSQLDataContext DataContext;

        /// <summary>
        /// The default SQL Objects Table instance to work with.
        /// </summary>
        protected Table<NavDBObject> NavSQLObjects;

        /// <summary>
        /// The finsql.exe Interface Class to work with.
        /// </summary>
        protected DevEnvInterface DevEnvInterface;

        #endregion

        #region ##### CONSTRUCTION AND INITIALIZATION

        /// <summary>
        /// Standard explicit constructor, works on an explicit set of configuration options.
        /// </summary>
        /// <param name="name">The userfriendly name of the connection.</param>
        /// <param name="devEnvPath">Path to finsql.exe.</param>
        /// <param name="databaseServer">SQL Server Host- and Instance Name</param>
        /// <param name="databaseName">SQL Database Name</param>
        /// <param name="wcBasePath">Working Copy Base Path</param>
        public WorkingCopy(string name, string devEnvPath, string databaseServer, string databaseName, string wcBasePath)
        {
            Contract.Requires(name != "");
            Contract.Requires(devEnvPath != "");
            Contract.Requires(databaseServer != "");
            Contract.Requires(databaseName != "");
            Contract.Ensures(File.Exists(DevEnvPath));
            Contract.Ensures(databaseName == DatabaseName);
            Contract.Ensures(databaseServer == DatabaseServer);
            Contract.Ensures(devEnvPath == DevEnvPath);
            Contract.Ensures(name == Name);
            Contract.Ensures(Version == CurrentVersion);

            Version = CurrentVersion;

            Name = name;
            DevEnvPath = devEnvPath;
            DatabaseServer = databaseServer;
            DatabaseName = databaseName;
            WCBasePath = wcBasePath;

            UpdateConnectionString();
            InitEFContext();
            InitDevEnvInterface();
        }

        /// <summary>
        /// Builds the actual EF Connection string to work with.
        /// </summary>
        protected void UpdateConnectionString()
        {
            Contract.Requires(DatabaseServer != "");
            Contract.Requires(DatabaseName != "");
            Contract.Ensures(DataSource != "");

            DataSource = $"Data Source=\"{DatabaseServer}\";Initial Catalog=\"{DatabaseName}\";Integrated Security=True";
        }

        /// <summary>
        /// Initializes the complete EF Context runtime state.
        /// </summary>
        protected void InitEFContext()
        {
            Contract.Requires(DataSource != "");
            Contract.Ensures(DataContext != null);
            Contract.Ensures(NavSQLObjects != null);

            DataContext = new NavSQLDataContext(DataSource);
            NavSQLObjects = DataContext.NavDBObject;
        }

        /// <summary>
        /// Initializes the DevEnvInterface runtime state.
        /// </summary>
        protected void InitDevEnvInterface()
        {
            Contract.Requires(DevEnvPath != "");
            Contract.Requires(File.Exists(DevEnvPath));
            Contract.Requires(DatabaseServer != "");
            Contract.Requires(DatabaseName != "");
            Contract.Ensures(DevEnvInterface != null);

            DevEnvInterface = new DevEnvInterface(DevEnvPath, DatabaseServer, DatabaseName);
        }

        #endregion


        #region ##### SERIALIZATION INTERFACE

        /// <summary>
        /// Called after deserialization, re-initializes the complete runtime state.
        /// </summary>
        /// <param name="sc"></param>
        [OnDeserialized]
        protected void DeserializationComplete(StreamingContext sc)
        {
            Contract.Ensures(Version == CurrentVersion);

            try
            {
                if (DatabaseName == "")
                    throw new InvalidDataException($"The Database Name setting is empty, working copy cache is invalid.");
                if (DatabaseServer == "")
                    throw new InvalidDataException($"The Database Server setting is empty, working copy cache is invalid.");
                if (DevEnvPath == "")
                    throw new InvalidDataException($"The finsql.exe path setting is empty, working copy cache is invalid.");
                if (!File.Exists(DevEnvPath))
                    throw new InvalidDataException($"The DevEnv Path {DevEnvPath} could not be found, working copy cache is invalid.");

                UpdateConnectionString();
                InitEFContext();
                InitDevEnvInterface();
            }
            catch (Exception ex)
            {
                log.Error(ex.Message);
                log.Debug(ex);
            }
        }

        #endregion

    }
}
